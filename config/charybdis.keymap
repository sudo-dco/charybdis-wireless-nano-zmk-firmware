#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/ext_power.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/36.h"                                      // Source key-labels.
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // Left-hand keys.
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // Right-hand keys.
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // Thumb keys.

#define DEF     0
#define NAV     1
#define FN      2
#define NUM     3
#define SYS     4

#define MOUSE   5
#define SLOW    6
#define SCROLL  7

#define XXX &none
#define ___ &trans

#define QUICK_TAP_MS 175

&sk {
  release-after-ms = <900>;
  quick-release;
};

&sl { // Allow sticky mods to chord across sticky layers.
  ignore-modifiers;
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <QUICK_TAP_MS>;
};


#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <150>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

// Hack: Make HRM combos tap-only (cf, ZMK issue #544).
#define ZMK_COMBO_8(NAME, TAP, POS, LAYERS, COMBO_MS, IDLE_MS, HOLD, SIDE)     \
  MAKE_HRM(hm_combo_##NAME, &kp, TAP, SIDE THUMBS)                             \
  ZMK_COMBO_6(NAME, &hm_combo_##NAME HOLD 0, POS, LAYERS, COMBO_MS, IDLE_MS)


ZMK_MOD_MORPH(mm_lbracket,
    bindings = <&kp LPRN>, <&kp LBKT>;
    mods = <(MOD_LSFT)>;
)

ZMK_MOD_MORPH(mm_rbracket,
    bindings = <&kp RPRN>, <&kp RBKT>;
    mods = <(MOD_LSFT)>;
)

ZMK_MOD_MORPH(mm_del_num,
    bindings = <&lt 2 BSPC>, <&kp DEL>;
    mods = <(MOD_RSFT)>;
)

#include "combos.dtsi" // Must be sourced after HRM-combo hack.


/* Nav cluster */

// Trigger tap-action on all interrupts.
#define MT_CORE                                                                \
  flavor = "tap-preferred";                                                    \
  tapping-term-ms = <220>;                                                     \
  quick-tap-ms = <220>;                                                        \
  hold-trigger-key-positions = <0>;

&mt { MT_CORE };

ZMK_HOLD_TAP(mt_home, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_HOLD_TAP(mt_end, bindings = <&masked_end>, <&kp>; MT_CORE)

#define NAV_LEFT  &mt_home 0   LEFT  // Tap: left  | Long-tap: start of line.
#define NAV_RIGHT &mt_end 0    RIGHT // Tap: right | Long-tap: end   of line.
#define NAV_UP    &mt LC(HOME) UP    // Tap: up    | Long-tap: start of doc.
#define NAV_DOWN  &mt LC(END)  DOWN  // Tap: down  | Long-tap: end   of doc.
#define NAV_BSPC  &mt LC(BSPC) BSPC  // Tap: bspc  | Long-tap: delete word bwd.
#define NAV_DEL   &mt LC(DEL)  DEL   // Tap: del   | Long-tap: delete word fwd.

// Mask CTRL on left/right hold to avoid accidental jumps to start/end of doc.
#define MASK_MODS(NAME, MODS, BINDING)                                         \
  ZMK_MOD_MORPH(NAME, bindings = <BINDING>, <BINDING>; mods = <MODS>;)

MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

/* Magic-shift & auto-layers */

// Tap: repeat after alpha, else sticky-shift |
// Shift + tap/ double-tap: caps-word | Hold: shift.
// #define MAGIC_SHIFT &magic_shift LSHFT 0
// ZMK_HOLD_TAP(magic_shift, bindings = <&kp>, <&magic_shift_tap>;
//              flavor = "balanced"; tapping-term-ms = <200>;
//              quick-tap-ms = <QUICK_TAP_MS>;)
// ZMK_MOD_MORPH(magic_shift_tap, bindings = <&shift_repeat>, <&caps_word>;
//               mods = <(MOD_LSFT)>;)
// ZMK_ADAPTIVE_KEY(
//     shift_repeat, bindings = <&sk LSHFT>;
//     repeat {
//       trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
//       bindings = <&key_repeat>;
//       max-prior-idle-ms = <1200>;
//       strict-modifiers;
//     };)
// &caps_word { // Mods deactivate caps-word, requires PR #1451. [TODO: rebase]
//   /delete-property/ ignore-modifiers;
// };

// Tap: num-word | double-tap: sticky num-layer | Hold: num-layer.
#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_TAP_DANCE(num_dance, bindings = <&num_word NUM>, <&sl NUM>;
              tapping-term-ms = <200>;)

// Smart-mouse, requires tri-state module.
// ZMK_TRI_STATE(
//     smart_mouse, bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
//     ignored-key-positions =
//         <LT1 LT2 LH0 LH1 RT1 RT2 RT3 RM0 RM1 RM2 RM3 RM4 RB1 RB2 RB3 RH0 RH1>;
//     ignored-layers = <MOUSE NAV FN>;)

/* Custom behaviors */

// Alt+Tab swapper, requires tri-state module.
// ZMK_TRI_STATE(swapper, bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
//               ignored-key-positions = <LT2 RT2 RM1 RM2 RM3>;)

// Define mod-morph with a *single* mod trigger for less repetition.
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
  ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
                bindings = <BINDING1>, <BINDING2>;)

// Tap: comma | Shift + tap: semicolon | Ctrl + shift + tap: <.
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// Tap: dot | Shift + tap: colon | Ctrl + shift + tap: >.
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// Tap: qmark | Shift + tap: excl.
SIMPLE_MORPH(qexcl, SFT, &kp QMARK, &kp EXCL)

// Tap: left/right parenthesis | Shft + tap: less-than/greater-than.
SIMPLE_MORPH(lpar_lt, SFT, &kp LPAR, &kp LT)
SIMPLE_MORPH(rpar_gt, SFT, &kp RPAR, &kp GT)

// Tap: space | Shift + tap: dot -> space -> sticky shift | Hold: nav layer.
ZMK_HOLD_TAP(lt_spc, bindings = <&mo>, <&spc_morph>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
SIMPLE_MORPH(spc_morph, SFT, &kp SPACE, &dot_spc)
ZMK_MACRO(dot_spc, bindings = <&kp DOT &kp SPACE &sk LSHFT>; wait-ms = <0>;
          tap-ms = <5>;)

// Tap: backspace | Lshft + tap: delete | Rshft + tap: shift-delete.
ZMK_MOD_MORPH(bs_del, bindings = <&kp BSPC>, <&kp DEL>;
              mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <MOD_RSFT>;)

// Tap: copy | double-tap: cut.
ZMK_TAP_DANCE(copy_cut, bindings = <&kp LC(INS)>, <&kp LC(X)>;
              tapping-term-ms = <200>;)

// Sticky shift + leader.
// ZMK_MACRO(leader_sft, bindings = <&sk LSHFT &leader>;)

// Misc aliases. [TODO: clean up]
#define CANCEL    &kp K_CANCEL            // Cancel caps-word & auto-layers.
#define DSK_PREV  &hmr LCTRL LG(LC(LEFT)) // Previous desktop.
#define DSK_NEXT  &hmr LALT LG(LC(RIGHT)) // Next     desktop.
#define PIN_WIN   &kp LG(LC(LS(Q)))       // Pin window across desktops.
#define PIN_APP   &kp LG(LC(LS(A)))       // Pin application across desktops.
#define DSK_MGR   &kp LA(GRAVE)           // Desktop manager.
#define VOL_DOWN  &hmr RSHFT C_VOL_DN

/* Keymap */

ZMK_CONDITIONAL_LAYER(sys, FN NUM, SYS) // FN + NUM --> SYS.

/ {

    /* input config for mouse move mode */
    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&trackball>;
        layers = <5>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <4>;
        scale-divisor = <5>;
        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */
    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&trackball>;
        layers = <6>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <6>;
    };

    /* input config for mouse scroll mode */
    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&trackball>;
        layers = <7>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 32>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */
    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */
    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };


    // behaviors {
    //     hm: homerow_mod {
    //         compatible = "zmk,behavior-hold-tap";
    //         #binding-cells = <2>;
    //         flavor = "tap-preferred";
    //         tapping-term-ms = <150>; // triggers the hold behavior when the tapping-term-ms has expired
    //         quick-tap-ms = <100>; // If you press a tapped hold-tap again within quick-tap-ms milliseconds of the first press, it will always trigger the tap behavior.
    //         //require-prior-idle-ms = <185>; // like quick-tap-ms however it will apply for any non-modifier key pressed before it
    //         bindings = <&kp>, <&kp>;  // hold, tap
    //     };
    // };

/*                KEY POSITIONS

  ╭────────────────────╮ ╭────────────────────╮
  │  0   1   2   3   4 │ │  5   6   7   8   9 │
  │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
  │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
  ╰───────╮ 30  31  32 │ │ 33  34 ╭───────────╯
          ╰────────────╯ ╰────────╯            */


    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
  &kp Q       &kp W       &kp F        &kp P         &kp B          &kp J     &kp L        &kp U         &kp Y        &kp SQT 
  &hml LGUI A &hml LALT R &hml LSHFT S &hml LCTRL T  &kp G          &kp M     &hmr LCTRL N &hmr RSHFT E  &hmr LALT I  &hmr LGUI O
  &kp Z       &kp X       &kp C        &kp D         &kp V          &kp K     &kp H        &comma_morph  &dot_morph  &qexcl
                          ___          &lt_spc NAV 0 &lt FN RET     SMART_NUM &kp LSHFT
            >;
        };

        NAV {
            bindings = <
  ___           ___           &kp LS(TAB)   &swapper    ___           &kp PG_UP     NAV_BSPC      ___           NAV_DEL       ___
  &sk LGUI      &sk LALT      &sk LSHFT     &sk LCTRL   ___           &kp PG_DN     NAV_LEFT      NAV_DOWN      NAV_UP        NAV_RIGHT
  ___           ___           ___           ___         ___           &kp INS       &kp TAB       &kp RET       ___           ___ 
                              ___           ___         ___           ___           CANCEL
            >;
        };

        FN {
            bindings = <
  &kp F12       &kp F7        &kp F8        &kp F9        ___            ___           &kp C_PREV    &kp C_VOL_UP  &kp C_NEXT    ___
  &hml LGUI F11 &hml LALT F4  &hml LSHFT F5 &hml LCTRL F6 ___            ___           DSK_PREV      VOL_DOWN      DSK_NEXT      ___
  &kp F10       &kp F1        &kp F2        &kp F3        ___            PIN_APP       PIN_WIN       DSK_MGR       ___           ___
                              ___           ___           ___            &kp C_MUTE    &kp C_PP
            >;
        };

        NUM {
              bindings = <
  ___           &kp N7        &kp N8        &kp N9        ___            ___           ___           ___           ___           ___
  &hml LGUI N0  &hml LALT N4  &hml LSHFT N5 &hml LCTRL N6 ___            ___           ___           ___           ___           ___ 
  ___           &kp N1        &kp N2        &kp N3        ___            ___           ___           ___           ___           ___
                              ___           &kp N0        ___            ___           ___
              >;
        };

        SYS {
            bindings = <
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR  ___           ___           ___           ___           ___
  ___           ___           ___           ___           ___         ___           ___           ___           ___           ___
  ___           ___           ___           ___           ___         ___           ___           ___           ___           ___
                              ___           ___           ___         ___           ___
            >;
        };

        MOUSE {
            bindings = <
	&trans &trans &trans &trans &trans              &trans &trans &trans &trans &trans
	&mo 6 &mkp MB1 &mkp MB2 &mkp MB3   &trans      &trans &trans &trans &trans &trans
	&mo 7 &trans &trans &trans &trans              &trans &trans &trans &trans &trans
	                     &trans &trans &trans       &trans  &trans
            >;
        };

        SLOW {
            bindings = <
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans   
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans   
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans  
                    &trans    &trans    &trans    &trans    &trans
            >;
        };

        SCROLL {
            bindings = <
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans   
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans   
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans  
                    &trans    &trans    &trans    &trans    &trans
            >;
        };
    };
};
