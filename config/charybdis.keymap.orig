
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/ext_power.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/36.h"                                      // Source key-labels.
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // Left-hand keys.
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // Right-hand keys.
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // Thumb keys.


#define BASE    0
#define NAV     1
#define NUM     2
#define SYM     3
#define ADJUST  4

#define MOUSE   5
#define SLOW    6
#define SCROLL  7

#define FUNC  8


ZMK_MOD_MORPH(mm_lbracket,
    bindings = <&kp LPRN>, <&kp LBKT>;
    mods = <(MOD_LSFT)>;
)

ZMK_MOD_MORPH(mm_rbracket,
    bindings = <&kp RPRN>, <&kp RBKT>;
    mods = <(MOD_LSFT)>;
)

ZMK_MOD_MORPH(mm_del_num,
    bindings = <&lt 2 BSPC>, <&kp DEL>;
    mods = <(MOD_RSFT)>;
)

#include "combos.dtsi" // Must be sourced after HRM-combo hack.


/ {

    /* input config for mouse move mode */
    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&trackball>;
        layers = <5>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <4>;
        scale-divisor = <5>;
        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */
    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&trackball>;
        layers = <6>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <6>;
    };

    /* input config for mouse scroll mode */
    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&trackball>;
        layers = <7>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 32>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */
    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */
    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };


    behaviors {
        hm: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>; // triggers the hold behavior when the tapping-term-ms has expired
            quick-tap-ms = <100>; // If you press a tapped hold-tap again within quick-tap-ms milliseconds of the first press, it will always trigger the tap behavior.
            //require-prior-idle-ms = <185>; // like quick-tap-ms however it will apply for any non-modifier key pressed before it
            bindings = <&kp>, <&kp>;  // hold, tap
        };
    };

/*                KEY POSITIONS

  ╭────────────────────╮ ╭────────────────────╮
  │  0   1   2   3   4 │ │  5   6   7   8   9 │
  │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
  │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
  ╰───────╮ 30  31  32 │ │ 33  34 ╭───────────╯
          ╰────────────╯ ╰────────╯            */


    keymap {
        compatible = "zmk,keymap";

	base {
	    bindings = <
   &kp Q       &kp W      &kp E      &kp R      &kp T     &kp Y    &kp U       &kp I      &kp O      &kp P
   &hm LGUI A  &hm LALT S &hm LCTL D &hm LSFT F &kp G     &kp H    &hm RSFT J  &hm RCTL K &hm RALT L &hm RGUI SCLN
   &lt 4 Z     &kp X      &kp C      &kp V      &kp B     &kp N    &kp M       &kp CMMA   &kp DOT    &kp FSLH
               &lt 5 TAB &mm_del_num &lt 3 DEL             &lt FUNC RET  &lt 1 SPC //&lt 4 ESC
			>;
	};

	nav {
	    bindings = <
	&trans &trans &trans &trans &trans         &trans &kp HOME  &kp PGDN &kp PGUP  &kp END
	&trans &trans &trans &trans &trans         &trans &kp LARW  &kp DARW &kp UARW  &kp RARW
	&trans &trans &trans &trans &trans         &trans &kp ESC   &trans   &trans    &trans
                      &trans &trans &trans         &trans &trans
			>;
	};


        nums {
 	     bindings = <
	&trans &trans &trans   &trans  &trans      &kp EQL   &kp NUM_7  &kp NUM_8  &kp NUM_9   &kp NUM_0
	&trans &trans &trans   &trans  &kp GRAV    &kp MINUS &kp NUM_4  &kp NUM_5  &kp NUM_6   &kp BKSP
	&kp UNDERSCORE &trans &kp BKSP &kp DEL &kp TILD    &kp PLUS  &kp NUM_1  &kp NUM_2  &kp NUM_3   &kp DOT
                      &trans &trans &trans         &trans    &trans
			>;
	};

	symb {
	     bindings = <
	&trans &trans &trans &trans &trans       &kp TILD    &kp LBRC  &kp RBRC  &kp GRAVE   &kp UNDERSCORE
	&trans &trans &trans &trans &trans       &kp PIPE    &kp LBKT  &kp RBKT  &kp LT      &kp GT
	&kp UNDERSCORE &trans &trans &trans &kp TILD     &kp AMPS    &kp LPRN  &kp RPRN  &kp QUOT    &kp BSLH
	         &trans &trans &trans            &trans      &trans
			>;
		};

	adjust {
	     bindings = <
        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4    &trans &kp F7  &kp F8  &kp F9   &kp F12
	&trans &trans &trans &trans &trans                                  &trans &kp F4  &kp F5  &kp F6   &kp F11
	&trans &bt BT_CLR &trans &trans &trans                              &trans &kp F1  &kp F2  &kp F3   &kp F10
	                  &trans &trans &trans                              &trans  &trans
			>;
        };

        MOUSE {
            bindings = <
	&trans &trans &trans &trans &trans              &trans &trans &trans &trans &trans
	&mo 6 &mkp MB1 &mkp MB2 &mkp MB3   &trans      &trans &trans &trans &trans &trans
	&mo 7 &trans &trans &trans &trans              &trans &trans &trans &trans &trans
	                     &trans &trans &trans       &trans  &trans
            >;
        };

        SLOW {
            bindings = <
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans   
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans   
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans  
                    &trans    &trans    &trans    &trans    &trans
            >;
        };

        SCROLL {
            bindings = <
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans   
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans   
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans  
                    &trans    &trans    &trans    &trans    &trans
            >;
        };

    	func {
	     bindings = <
    &trans &trans &trans &trans &trans       &trans &kp F7  &kp F8  &kp F9   &kp F12
	&trans &trans &trans &trans &trans       &trans &kp F4  &kp F5  &kp F6   &kp F11
	&trans &trans &trans &trans &trans       &trans &kp F1  &kp F2  &kp F3   &kp F10
	                  &trans &trans &trans                              &trans  &trans
			>;
        };


    };
};
